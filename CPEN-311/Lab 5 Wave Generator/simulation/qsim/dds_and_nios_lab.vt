// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/03/2017 23:38:37"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    dds_and_nios_lab
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module dds_and_nios_lab_vlg_vec_tst();
// constants                                           
// general purpose registers
reg AUD_ADCDAT;
reg treg_AUD_ADCLRCK;
reg treg_AUD_BCLK;
reg treg_AUD_DACLRCK;
reg CLOCK_27;
reg CLOCK_50;
reg [15:0] treg_DRAM_DQ;
reg [7:0] treg_FL_DQ;
reg treg_FPGA_I2C_SDAT;
reg [35:0] treg_GPIO_0;
reg [35:0] treg_GPIO_1;
reg [3:0] KEY;
reg [7:0] treg_LCD_DATA;
reg treg_PS2_CLK;
reg treg_PS2_DAT;
reg treg_SD_CMD;
reg treg_SD_DAT;
reg SD_DAT3;
reg [15:0] treg_SRAM_DQ;
reg [17:0] SW;
reg UART_RXD;
// wires                                               
wire AUD_ADCLRCK;
wire AUD_BCLK;
wire AUD_DACDAT;
wire AUD_DACLRCK;
wire AUD_XCK;
wire [11:0] DRAM_ADDR;
wire DRAM_BA_0;
wire DRAM_BA_1;
wire DRAM_CAS_N;
wire DRAM_CKE;
wire DRAM_CLK;
wire DRAM_CS_N;
wire [15:0] DRAM_DQ;
wire DRAM_LDQM;
wire DRAM_RAS_N;
wire DRAM_UDQM;
wire DRAM_WE_N;
wire [21:0] FL_ADDR;
wire FL_CE_N;
wire [7:0] FL_DQ;
wire FL_OE_N;
wire FL_RST_N;
wire FL_WE_N;
wire FPGA_I2C_SCLK;
wire FPGA_I2C_SDAT;
wire [35:0] GPIO_0;
wire [35:0] GPIO_1;
wire [6:0] HEX0;
wire [6:0] HEX1;
wire [6:0] HEX2;
wire [6:0] HEX3;
wire [6:0] HEX4;
wire [6:0] HEX5;
wire [6:0] HEX6;
wire [6:0] HEX7;
wire [7:0] LCD_DATA;
wire LCD_EN;
wire LCD_ON;
wire LCD_RS;
wire LCD_RW;
wire [8:0] LEDG;
wire [17:0] LEDR;
wire PS2_CLK;
wire PS2_DAT;
wire SD_CLK;
wire SD_CMD;
wire SD_DAT;
wire [17:0] SRAM_ADDR;
wire SRAM_CE_N;
wire [15:0] SRAM_DQ;
wire SRAM_LB_N;
wire SRAM_OE_N;
wire SRAM_UB_N;
wire SRAM_WE_N;
wire UART_TXD;
wire [9:0] VGA_B;
wire VGA_BLANK;
wire VGA_CLK;
wire [9:0] VGA_G;
wire VGA_HS;
wire [9:0] VGA_R;
wire VGA_SYNC;
wire VGA_VS;

// assign statements (if any)                          
assign AUD_ADCLRCK = treg_AUD_ADCLRCK;
assign AUD_BCLK = treg_AUD_BCLK;
assign AUD_DACLRCK = treg_AUD_DACLRCK;
assign DRAM_DQ = treg_DRAM_DQ;
assign FL_DQ = treg_FL_DQ;
assign FPGA_I2C_SDAT = treg_FPGA_I2C_SDAT;
assign GPIO_0 = treg_GPIO_0;
assign GPIO_1 = treg_GPIO_1;
assign LCD_DATA = treg_LCD_DATA;
assign PS2_CLK = treg_PS2_CLK;
assign PS2_DAT = treg_PS2_DAT;
assign SD_CMD = treg_SD_CMD;
assign SD_DAT = treg_SD_DAT;
assign SRAM_DQ = treg_SRAM_DQ;
dds_and_nios_lab i1 (
// port map - connection between master ports and signals/registers   
	.AUD_ADCDAT(AUD_ADCDAT),
	.AUD_ADCLRCK(AUD_ADCLRCK),
	.AUD_BCLK(AUD_BCLK),
	.AUD_DACDAT(AUD_DACDAT),
	.AUD_DACLRCK(AUD_DACLRCK),
	.AUD_XCK(AUD_XCK),
	.CLOCK_27(CLOCK_27),
	.CLOCK_50(CLOCK_50),
	.DRAM_ADDR(DRAM_ADDR),
	.DRAM_BA_0(DRAM_BA_0),
	.DRAM_BA_1(DRAM_BA_1),
	.DRAM_CAS_N(DRAM_CAS_N),
	.DRAM_CKE(DRAM_CKE),
	.DRAM_CLK(DRAM_CLK),
	.DRAM_CS_N(DRAM_CS_N),
	.DRAM_DQ(DRAM_DQ),
	.DRAM_LDQM(DRAM_LDQM),
	.DRAM_RAS_N(DRAM_RAS_N),
	.DRAM_UDQM(DRAM_UDQM),
	.DRAM_WE_N(DRAM_WE_N),
	.FL_ADDR(FL_ADDR),
	.FL_CE_N(FL_CE_N),
	.FL_DQ(FL_DQ),
	.FL_OE_N(FL_OE_N),
	.FL_RST_N(FL_RST_N),
	.FL_WE_N(FL_WE_N),
	.FPGA_I2C_SCLK(FPGA_I2C_SCLK),
	.FPGA_I2C_SDAT(FPGA_I2C_SDAT),
	.GPIO_0(GPIO_0),
	.GPIO_1(GPIO_1),
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.HEX4(HEX4),
	.HEX5(HEX5),
	.HEX6(HEX6),
	.HEX7(HEX7),
	.KEY(KEY),
	.LCD_DATA(LCD_DATA),
	.LCD_EN(LCD_EN),
	.LCD_ON(LCD_ON),
	.LCD_RS(LCD_RS),
	.LCD_RW(LCD_RW),
	.LEDG(LEDG),
	.LEDR(LEDR),
	.PS2_CLK(PS2_CLK),
	.PS2_DAT(PS2_DAT),
	.SD_CLK(SD_CLK),
	.SD_CMD(SD_CMD),
	.SD_DAT(SD_DAT),
	.SD_DAT3(SD_DAT3),
	.SRAM_ADDR(SRAM_ADDR),
	.SRAM_CE_N(SRAM_CE_N),
	.SRAM_DQ(SRAM_DQ),
	.SRAM_LB_N(SRAM_LB_N),
	.SRAM_OE_N(SRAM_OE_N),
	.SRAM_UB_N(SRAM_UB_N),
	.SRAM_WE_N(SRAM_WE_N),
	.SW(SW),
	.UART_RXD(UART_RXD),
	.UART_TXD(UART_TXD),
	.VGA_B(VGA_B),
	.VGA_BLANK(VGA_BLANK),
	.VGA_CLK(VGA_CLK),
	.VGA_G(VGA_G),
	.VGA_HS(VGA_HS),
	.VGA_R(VGA_R),
	.VGA_SYNC(VGA_SYNC),
	.VGA_VS(VGA_VS)
);
initial 
begin 
#1000000 $finish;
end 

// CLOCK_50
always
begin
	CLOCK_50 = 1'b0;
	CLOCK_50 = #5000 1'b1;
	#5000;
end 
initial 
begin 
#1000000 $finish;
end 
endmodule

